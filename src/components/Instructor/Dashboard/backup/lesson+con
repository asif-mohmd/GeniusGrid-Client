import React, { useState } from 'react';

function YourComponent() {
  const [formData, setFormData] = useState({
    videoTitle: "",
    videoURL: "",
  });

  const [lessons, setLessons] = useState([]);
  const [editIndex, setEditIndex] = useState(null); // State to track the index of the content being edited

  const handleFormDataSubmit = () => {
    if (formData.videoTitle !== "" && formData.videoURL !== "") {
      if (lessons.length > 0) {
        const updatedLessons = [...lessons];
        if (editIndex !== null) {
          // If an edit is in progress, update the existing content
          updatedLessons[editIndex.lessonIndex][editIndex.contentIndex] = formData;
          setEditIndex(null); // Reset editIndex after editing
        } else {
          // Otherwise, add content to the last lesson
          updatedLessons[updatedLessons.length - 1].push(formData);
        }
        setLessons(updatedLessons);
      } else {
        setLessons([[formData]]);
      }
      setFormData({ videoTitle: "", videoURL: "" });
    }
  };

  const handleNewLesson = () => {
    if (lessons.length === 0 || lessons[lessons.length - 1].length > 0) {
      setLessons(prevLessons => [...prevLessons, []]);
    } else {
      alert("Please add content to the current lesson before creating a new one.");
    }
  };

  const handleEdit = (lessonIndex, contentIndex) => {
    // Set editIndex to the index of the content being edited
    setEditIndex({ lessonIndex, contentIndex });
    // Populate the form with the content to be edited
    setFormData(lessons[lessonIndex][contentIndex]);
  };

  const handleDeleteLesson = (lessonIndex) => {
    const updatedLessons = [...lessons];
    updatedLessons.splice(lessonIndex, 1);
    setLessons(updatedLessons);
  };

  const handleDeleteContent = (lessonIndex, contentIndex) => {
    const updatedLessons = [...lessons];
    updatedLessons[lessonIndex].splice(contentIndex, 1);
    setLessons(updatedLessons);
  };

  const handleGlobalSubmit = () => {
    if (lessons.some(lesson => lesson.length > 0)) {
      console.log(lessons);
    } else {
      alert("There is no content to submit.");
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevFormData => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  return (
    <div>
      <form>
        <input
          type="text"
          name="videoTitle"
          value={formData.videoTitle}
          onChange={handleInputChange}
          placeholder="Video Title"
        />
        <input
          type="text"
          name="videoURL"
          value={formData.videoURL}
          onChange={handleInputChange}
          placeholder="Video URL"
        />
        <button type="button" onClick={handleFormDataSubmit}>{editIndex !== null ? 'Save Edit' : 'Add Content'}</button>
        <button type="button" onClick={handleNewLesson}>New Lesson</button>
      </form>

      <div>
        {lessons.map((lesson, lessonIndex) => (
          <div key={lessonIndex}>
            <p>Lesson {lessonIndex + 1}</p>
            <button type="button" onClick={() => handleDeleteLesson(lessonIndex)}>Delete Lesson</button>
            {lesson.map((content, contentIndex) => (
              <div key={contentIndex}>
                <p>Content {contentIndex + 1}</p>
                <p>Title: {content.videoTitle}</p>
                <p>URL: {content.videoURL}</p>
                <button type="button" onClick={() => handleEdit(lessonIndex, contentIndex)}>Edit</button>
                <button type="button" onClick={() => handleDeleteContent(lessonIndex, contentIndex)}>Delete Content</button>
              </div>
            ))}
          </div>
        ))}
      </div>

      <button type="button" onClick={handleGlobalSubmit}>Submit All Lessons</button>
    </div>
  );
}

export default YourComponent;
