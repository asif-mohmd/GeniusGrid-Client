import { Formik, Form, Field, FormikHelpers, ErrorMessage } from "formik";
import * as Yup from "yup";
import { ICreateCourse1 } from "../../../../interfaces/ICourseInterface";

import { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import { useDispatch, useSelector } from "react-redux";
import courseEndspoints from "../../../../constraints/endpoints/courseEndspoints";
import { instructoraxios } from "../../../../constraints/axiosInterceptors/instructorAxiosInterceptors";
import { useNavigate } from "react-router-dom";
import instructorEndpoints from "../../../../constraints/endpoints/instructorEndpoints";
import { setCourseData1 } from "../../../../redux/instructorSlices/courseData";
import { IoMdArrowRoundBack } from "react-icons/io";
import { RootState } from "../../../../redux/Store";

const EditCourse = () => {
  const [benefits, setBenefits] = useState<string[]>([""]);
  const [prerequisites, setPrerequisites] = useState<string[]>([""]);
  const [courseDetails, setCourseDetails] = useState<ICreateCourse1>({
  courseName: "",
  courseDescription: "",
  coursePrice: "",
  estimatedPrice: "",
  courseTags: "",
  totalVideos: "",
  courseLevel: "",
  demoURL: "",
  benefits: [],
  prerequisites: [],})
 

  const courseId = useSelector((state:RootState)=>state.courseData.privateIdStore)

  console.log(typeof(courseId),"courrsee idddd")

  useEffect(()=>{
    async function fetchCourseData() {
      try {
        const response = await instructoraxios.get(`${courseEndspoints.courseDetails}/${courseId}`);
        setCourseDetails(response.data.courseDetails.courseDetails);
      } catch (error) {
        console.error("Error fetching course details:", error);
      }
    }
    

    fetchCourseData()
  },[courseId])

  const navigate = useNavigate();
  const dispatch = useDispatch();
  console.log(courseDetails.courseName,"heleelelelellelelelelelelel")
  const initialValues = {
    courseName: courseDetails.courseName || "",
    courseDescription: courseDetails.courseDescription || "",
    coursePrice: courseDetails.coursePrice || "",
    estimatedPrice: courseDetails.estimatedPrice || "",
    courseTags: courseDetails.courseTags || "",
    courseLevel: courseDetails.courseLevel || "",
    totalVideos: courseDetails.totalVideos || "",
    demoURL: courseDetails.demoURL || "",
    benefits: courseDetails.benefits || [" "],
    prerequisites: courseDetails.prerequisites || [" "],
  };
  

  const validationSchema = Yup.object().shape({
    courseName: Yup.string().required("Course name is required"),
    courseDescription: Yup.string().required("Course description is required"),
    coursePrice: Yup.number().required("Course price is required"),
    estimatedPrice: Yup.number().required("Estimated price is required"),
    courseTags: Yup.string().required("Course tags are required"),
    courseLevel: Yup.string().required("Course level is required"),
    totalVideos: Yup.string().required("Course category is required"),
    demoURL: Yup.string().required("Introduction URL is required"),
    benefits: Yup.array().of(Yup.string()).required("Benefits are required"),
    prerequisites: Yup.array()
      .of(Yup.string())
      .required("Prerequisites are required"),
  });



  const handleSubmit = async (
    values: ICreateCourse1,
    { setSubmitting }: FormikHelpers<ICreateCourse1>
  ) => {
    try {
      values.benefits = benefits.filter((benefit) => benefit.trim() !== "");
      values.prerequisites = prerequisites.filter(
        (prerequisite) => prerequisite.trim() !== ""
      );
      console.log(values, "--------------------");
      console.log("ivde aaane");

      const courseData = await instructoraxios.post(
        courseEndspoints.createCourse,
        { values }
      );

      console.log(courseData.data.status, "yeyeyeyyeyeyeeyyeye");
      dispatch(setCourseData1(values));
      navigate(instructorEndpoints.dashboard);
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setSubmitting(false);
    }
  };

  const handleBack = () => {
    console.log("workin gbackkk");
    navigate(instructorEndpoints.myCourses);
  };

  return (
    <div className="text-gray-900 bg-slate-50 h-screen w-full ">
      <ToastContainer />
      <div className="px-3 py-4 flex justify-center">
        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
        >
          {({ errors, touched, isSubmitting }) => (
            <Form className="sm:w-3/4 bg-white p-4 rounded-xl">
              <div className="pb-7 pt-2 flex items-center justify-between">
                <h1 className="text-2xl font-semibold">Edit course</h1>
                <div>
                  <h1 className="cursor-pointer">
                    <IoMdArrowRoundBack
                      onClick={handleBack}
                      className="text-4xl hover:text-gray-700 focus:text-gray-700 transition duration-300 ease-in-out"
                    />
                  </h1>
                </div>
              </div>
              <div className="flex flex-wrap -mx-3 mb-6">
                <div className="w-full px-3 mb-6 md:mb-0">
                  <label
                    htmlFor="courseName"
                    className="block  tracking-wide text-gray-700 text-xs font-bold mb-2"
                  >
                    Course Name
                  </label>
                  <Field
                    type="text"
                    id="courseName"
                    name="courseName"
                    className={`appearance-none block w-full bg-slate-50 text-gray-700 border ${
                      errors.courseName && touched.courseName && !isSubmitting
                        ? "border-red-500"
                        : "border-gray-200"
                    } rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white`}
                    placeholder="Enter course name"
                  />
                  {errors.courseName && touched.courseName && !isSubmitting && (
                    <div className="text-red-500 border-red-500 text-xs italic">
                      {errors.courseName}
                    </div>
                  )}
                </div>

        // some code here that not added for gpt

                <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                  <label
                    htmlFor="demoURL"
                    className="block  tracking-wide text-gray-700 text-xs font-bold mb-2"
                  >
                    Demo URL
                  </label>
                  <Field
                    type="text"
                    id="demoURL"
                    name="demoURL"
                    className={`appearance-none block w-full bg-slate-50 text-gray-700 border ${
                      errors.demoURL && touched.demoURL && !isSubmitting
                        ? "border-red-500"
                        : "border-gray-200"
                    } rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white`}
                    placeholder="Enter Demo URL"
                  />
                  {errors.demoURL && touched.demoURL && !isSubmitting && (
                    <div className="text-red-500 border-red-500 text-xs italic">
                      {errors.demoURL}
                    </div>
                  )}
                </div>

                <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                  <p className="text-lg font-semibold mb-2">
                    What are the benefits for the students in the course
                  </p>
                  {benefits.map((benefit, index) => (
                    <div key={index} className="mb-3 flex">
                      <Field
                        name={`benefits.${index}`}
                        type="text"
                        as="input"
                        className="appearance-none block bg-gray-50 text-gray-700 border border-gray-300 rounded-md p-1  w-5/6 mr-2"
                        value={benefit}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                          handleBenefitInputChange(index, e.target.value)
                        }
                      />
                      {index !== benefits.length - 1 && (
                        <button
                          type="button"
                          onClick={() => handleDeleteInput(index, "benefits")}
                          className="bg-red-500 text-white py-1 px-2 rounded"
                        >
                          Delete
                        </button>
                      )}
                    </div>
                  ))}
                  <ErrorMessage
                    name="benefits"
                    component="div"
                    className="text-red-500"
                  />
                  <button
                    type="button"
                    onClick={addBenefitInput}
                    className="m-2 bg-green-500 text-white py-1 px-2 rounded"
                  >
                    Add new
                  </button>
                </div>

                <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                  <p className="text-lg font-semibold mb-2">
                    What are the prerequisites for students in this course
                  </p>
                  {prerequisites.map((prerequisite, index) => (
                    <div key={index} className="mb-3 flex">
                      <Field
                        name={`prerequisites.${index}`}
                        type="text"
                        as="input"
                        className="appearance-none block bg-gray-50 text-gray-700 border border-gray-300 rounded-md p-1  w-5/6 mr-2"
                        value={prerequisite}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                          handlePrerequisiteInputChange(index, e.target.value)
                        }
                      />
                      {index !== prerequisites.length - 1 && (
                        <button
                          type="button"
                          onClick={() =>
                            handleDeleteInput(index, "prerequisites")
                          }
                          className="bg-red-500 text-white py-1 px-2 rounded"
                        >
                          Delete
                        </button>
                      )}
                    </div>
                  ))}
                  <ErrorMessage
                    name="prerequisites"
                    component="div"
                    className="text-red-500"
                  />
                  <button
                    type="button"
                    onClick={addPrerequisiteInput}
                    className="m-2 bg-green-500 text-white py-1 px-2 rounded"
                  >
                    Add new
                  </button>
                </div>

                {/* Add similar Field components for other inputs */}
              </div>
              <div className="flex justify-center">
                <button
                  type="submit"
                  className="bg-blue-500 hover:bg-blue-700 text-white font-mono font-bold py-3 px-6 rounded-md "
                >
                  Submit
                </button>
              </div>
            </Form>
          )}
        </Formik>
      </div>
    </div>
  );
};

export default EditCourse;
